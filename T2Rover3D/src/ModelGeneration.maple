# Copyright (C) INRIA 1999-2005
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as published
# by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# 
# Author(s): Pierre-Brice Wieber
# Affiliation(s): INRIA, team BIPOP
# Email(s): Pierre-Brice.Wieber@inria.fr
# 


printf("        -------------------------------------------\n");
printf("                        HuMAnS-1.0.1\n");
printf("               Maple C code generation for\n");
printf("           A Scilab toolbox for Humanoid Motion\n");
printf("                  Analysis and simulation\n");
printf("               Copyright (C) INRIA 1999-2005\n");
printf("        -------------------------------------------\n");

with(StringTools):
with(linalg):
with(codegen, C, makeproc):

REGISTERING := false:

Register := proc(x)
global REGISTERING, RegisteredList;

	if type(x, atomic) or type(-x, atomic) or not REGISTERING then
		RETURN(x):
	else
		RegisteredList := [op(RegisteredList), x]:
		RETURN(tmp||(vectdim(RegisteredList))):
	end:
end:

OptimizeRegisteredList := proc(RegisteringResult)
global RegisteredList;
local i, j, useful;

	for i from vectdim(RegisteredList) by -1 to 1 do
		useful := false:
		for j from 1 to vectdim(RegisteringResult) while not useful do
			useful := useful or has(RegisteringResult[j], tmp||(i)):
		end do:
		for j from i+1 to vectdim(RegisteredList) while not useful do
			useful := useful or has(RegisteredList[j], tmp||(i)):
		end do:
		if not useful then
			RegisteredList := subsop(i=0, RegisteredList):
		end:
	end do:
end:

PrintRegisteredList := proc(fd)
global RegisteredList;
local i;

	for i from 1 to vectdim(RegisteredList) do
		if RegisteredList[i] <> 0 then
			fprintf(fd, "  double %s", CodeGeneration[C](
				map(y->subs({seq(cos(q[i+1])=C||i, i=0..NDDL-1),
					seq(sin(q[i+1])=S||i, i=0..NDDL-1)}, y), RegisteredList[i]),
				resultname = "tmp"||(i), output = string,
				coercetypes = false, deducetypes = false)):
		end:
	end do:
end:

GenerateSC := proc(fd)
local i;

	for i from 0 to NDDL-1 do
		fprintf(fd, "  double C%d = cos(q[%d]);\n", i, i):
		fprintf(fd, "  double S%d = sin(q[%d]);\n", i, i):
	end do:
end:

FrameMatrix := proc(k) option remember;

	RETURN(matrix([[cos(eval(cat(z_,k)))*cos(eval(cat(y_,k))),cos(eval(cat(z_,k)))*sin(eval(cat(y_,k)))*sin(eval(cat(x_,k)))-sin(eval(cat(z_,k)))*cos(eval(cat(x_,k))),cos(eval(cat(z_,k)))*sin(eval(cat(y_,k)))*cos(eval(cat(x_,k)))+sin(eval(cat(z_,k)))*sin(eval(cat(x_,k))),eval(cat(Tx_,k))],
	[sin(eval(cat(z_,k)))*cos(eval(cat(y_,k))),sin(eval(cat(z_,k)))*sin(eval(cat(y_,k)))*sin(eval(cat(x_,k)))+cos(eval(cat(z_,k)))*cos(eval(cat(x_,k))),sin(eval(cat(z_,k)))*sin(eval(cat(y_,k)))*cos(eval(cat(x_,k)))-cos(eval(cat(z_,k)))*sin(eval(cat(x_,k))),eval(cat(Ty_,k))],
	[-sin(eval(cat(y_,k))), cos(eval(cat(y_,k)))*sin(eval(cat(x_,k))),cos(eval(cat(y_,k)))*cos(eval(cat(x_,k))), eval(cat(Tz_,k))],
	[0, 0, 0, 1]])):
end:


NLEffectsRecursion := proc(j, Omegai, Omegadoti, Accelerationi, Ui)
local FrameChange, R, P, RTRdot, RTPdot, RTOmegai, Omegaj,
	Omegadotj, Accelerationj, Uj, F, M, Gamma, k, Result, RF;

	FrameChange := FrameMatrix(j):
	R := submatrix(FrameChange, 1..3, 1..3):
	P := subvector(FrameChange, 1..3, 4):
	RTRdot := map(simplify, evalm(transpose(R)&*
		map(x->subs({seq(q[i](t)=q[i], i=1..NDDL),
		seq(diff(q[i](t), t)=qdot[i], i=1..NDDL)},
		diff(subs({seq(q[i]=q[i](t), i=1..NDDL)}, x), t)), R))):
	RTRdot := Vector([RTRdot[3, 2], RTRdot[1, 3], RTRdot[2, 1]]):
	RTPdot := evalm(transpose(R)&*
		map(x->subs({seq(q[i](t)=q[i], i=1..NDDL),
		seq(diff(q[i](t), t)=qdot[i], i=1..NDDL)},
		diff(subs({seq(q[i]=q[i](t), i=1..NDDL)}, x), t)), P)):

	RTOmegai := map(Register, evalm(transpose(R)&*Omegai)):
	Omegaj := evalm(RTOmegai+RTRdot):
	Omegadotj := map(Register, evalm(transpose(R)&*Omegadoti+crossprod(RTOmegai, RTRdot))):
	Accelerationj := map(Register, evalm(transpose(R)&*(Accelerationi+Ui&*P)+2*crossprod(RTOmegai, RTPdot))):

	Uj := map(Register, matrix([[-Omegaj[3]^2-Omegaj[2]^2, -Omegadotj[3]+Omegaj[2]*Omegaj[1], Omegadotj[2]+Omegaj[3]*Omegaj[1]],
					[Omegadotj[3]+Omegaj[2]*Omegaj[1], -Omegaj[3]^2-Omegaj[1]^2, -Omegadotj[1]+Omegaj[3]*Omegaj[2]],
					[-Omegadotj[2]+Omegaj[3]*Omegaj[1], Omegadotj[1]+Omegaj[3]*Omegaj[2], -Omegaj[2]^2-Omegaj[1]^2]])):

	F := map(Register, evalm(m_||(j)*Accelerationj+Uj&*(m_||(j)*G_||(j)))):
	M := map(Register, evalm(IO_||(j)&*Omegadotj+crossprod(Omegaj, IO_||(j)&*Omegaj)+crossprod(cat(m_,j)*cat(G_,j), Accelerationj))):
	Gamma := vector(NDDL, 0):

	for k from 1 to NSOL
	do
		if ref_||(k) = j
		then
			Result := NLEffectsRecursion(k, Omegaj, Omegadotj, Accelerationj, Uj):
			F := map(Register, evalm(F+Result[1])):
			M := map(Register, evalm(M+Result[2])):
			Gamma := map(Register, evalm(Gamma+Result[3])):
		fi:
	od:

	Gamma := map(Register, evalm(Gamma+transpose(jacobian(RTRdot, qdot))&*M+transpose(jacobian(RTPdot, qdot))&*F)):
	RF := map(Register, evalm(R&*F));
	#print(map(x->if x=0 then 0 else 1 fi, Gamma));
	print(`Frame `||(j));
	RETURN([evalm(RF), map(Register, evalm(R&*M+crossprod(P, RF))), evalm(Gamma)]):
end:

NLEffectsVector := proc()
local Result;

	print(`NLEffects Vector`);
	Result := NLEffectsRecursion(1, [0, 0, 0], [0, 0, 0], evalm(-Gravity), [[0, 0, 0], [0, 0, 0], [0, 0, 0]]):
	RETURN(Result[3]):
end:

GenerateNLEffectsVector := proc()
global REGISTERING, RegisteredList;
local fd, FileName, CodeList, CodeLine, i, N;

	FileName := "NLEffects.c":
	REGISTERING := true:
	RegisteredList := []:
	N := convert(evalm(NLEffectsVector()), vector):
	print(`Optimizing...`);
	OptimizeRegisteredList(N):
	CodeList := [codegen[optimize](N)]:
	unassign(N):
	print(`Generating "`||(FileName)||`"`);
	fd := fopen(FileName, WRITE):
	fprintf(fd, "#include <math.h>\n"):
	fprintf(fd, "#include ""LagrangianModel.h""\n\n"):
	fprintf(fd, "void NLEffects(N, q, qdot)\n"):
	fprintf(fd, "double N[%d];\n", NDDL):
	fprintf(fd, "double q[%d];\n", NDDL):
	fprintf(fd, "double qdot[%d];\n", NDDL):
	fprintf(fd, "{\n"):
	GenerateSC(fd):
	PrintRegisteredList(fd):
	for i from 1 to vectdim(CodeList) do
		if i <= vectdim(CodeList)-NDDL then
			CodeLine := convert(CodeList[i], list):
			fprintf(fd, "  double %s", CodeGeneration[C](CodeLine[2], resultname = CodeLine[1], output = string,
				coercetypes = false, deducetypes = false)):
		else
			fprintf(fd, "  %s", CodeGeneration[C]([CodeList[i]], output = string,
				coercetypes = false, deducetypes = false)):
		end:
	end do:
	fprintf(fd, "}\n"):
	fclose(fd):
	REGISTERING := false:
end:

JacobianNLEffectsMatrix := proc()
local nleffects, y;
	
	print(`NLEffects Jacobian`);
	nleffects := NLEffectsVector():
	y := convert(nleffects, matrix):
	RETURN(jacobian(col(y, 1), q)):

end:

JacobianVelocityNLEffectsMatrix := proc()
local nleffects, y;
	
	print(`NLEffects Velocity Jacobian`);
	nleffects := NLEffectsVector():
	y := convert(nleffects, matrix):
	RETURN(jacobian(col(y, 1), qdot)):

end:


InertiaRecursion := proc(j)
local FrameChange, R, P, RTRdot, RTPdot, JR, JP, m, mG, IO, F, M, Inertia, k, Result, mGx, FTJP, MTJR, Fadd, Madd, RmG, RmGx, RF, Px, PxRmGx;

	FrameChange := FrameMatrix(j):
	R := submatrix(FrameChange, 1..3, 1..3):
	P := subvector(FrameChange, 1..3, 4):
	RTRdot := map(simplify, evalm(transpose(R)&*
		map(x->subs({seq(q[i](t)=q[i], i=1..NDDL),
		seq(diff(q[i](t), t)=qdot[i], i=1..NDDL)},
		diff(subs({seq(q[i]=q[i](t), i=1..NDDL)}, x), t)), R))):
	RTPdot := evalm(transpose(R)&*
		map(x->subs({seq(q[i](t)=q[i], i=1..NDDL),
		seq(diff(q[i](t), t)=qdot[i], i=1..NDDL)},
		diff(subs({seq(q[i]=q[i](t), i=1..NDDL)}, x), t)), P)):
	JR := jacobian(vector([RTRdot[3, 2], RTRdot[1, 3], RTRdot[2, 1]]), qdot):
	JP := jacobian(RTPdot, qdot):

	m := m_||(j):
	mG := evalm(m*G_||(j)):
	IO := evalm(IO_||(j)):
	F := matrix(3, NDDL, 0):
	M := matrix(3, NDDL, 0):
	Inertia := matrix(NDDL, NDDL, 0):

	for k from 1 to NSOL
	do
		if ref_||(k) = j
		then
			Result := InertiaRecursion(k):
			m := evalm(m+Result[1]):
			mG := map(Register, evalm(mG+Result[2])):
			IO := map(Register, evalm(IO+Result[3])):
			F := map(Register, evalm(F+Result[4])):
			M := map(Register, evalm(M+Result[5])):
			Inertia := evalm(Inertia+Result[6]):
		fi:
	od:

	mGx := matrix([[0, -mG[3], mG[2]], [mG[3], 0, -mG[1]], [-mG[2], mG[1], 0]]):
	FTJP := map(Register, evalm(transpose(F)&*JP)):
	MTJR := map(Register, evalm(transpose(M)&*JR)):
	Fadd := map(Register, evalm(m*JP-mGx&*JR)):
	Madd := map(Register, evalm(IO&*JR+mGx&*JP)):
	Inertia := evalm(Inertia+FTJP+transpose(FTJP)+MTJR+transpose(MTJR)+transpose(Fadd)&*JP+transpose(Madd)&*JR):
	F := evalm(F+Fadd):
	M := evalm(M+Madd):
	RmG := map(Register, evalm(R&*mG)):
	RmGx := matrix([[0, -RmG[3], RmG[2]], [RmG[3], 0, -RmG[1]], [-RmG[2], RmG[1], 0]]):
	RF := map(Register, evalm(R&*F)):
	Px := matrix([[0, -P[3], P[2]], [P[3], 0, -P[1]], [-P[2], P[1], 0]]):
	PxRmGx := map(Register, evalm(Px&*RmGx)):
	print(`Frame `||(j));
	RETURN([m, evalm(RmG+m*P), evalm(R&*map(Register, evalm(IO&*transpose(R)))-m*Px&*Px-PxRmGx-transpose(PxRmGx)), evalm(RF), evalm(R&*M+Px&*RF), evalm(Inertia)]):
end:

InertiaMatrix := proc()
local Result;

	print(`Inertia Matrix`);
	Result := InertiaRecursion(1):
	RETURN(Result[6]):
end:

GenerateInertiaMatrix := proc()
global REGISTERING, RegisteredList;
local fd, FileName, CodeList, CodeLine, i, M;

	FileName := "Inertia.c":
	REGISTERING := true:
	RegisteredList := []:
	M := convert(evalm(InertiaMatrix()), vector):
	print(`Optimizing...`);
	OptimizeRegisteredList(M):
	CodeList := [codegen[optimize](M)]:
	unassign(M):
	print(`Generating "`||(FileName)||`"`);
	fd := fopen(FileName, WRITE):
	fprintf(fd, "#include <math.h>\n"):
	fprintf(fd, "#include ""LagrangianModel.h""\n\n"):
	fprintf(fd, "void Inertia(M, q)\n"):
	fprintf(fd, "double M[%d];\n", NDDL^2):
	fprintf(fd, "double q[%d];\n", NDDL):
	fprintf(fd, "{\n"):
	GenerateSC(fd):
	PrintRegisteredList(fd):
	for i from 1 to vectdim(CodeList) do
		if i <= vectdim(CodeList)-NDDL*NDDL then
			CodeLine := convert(CodeList[i], list):
			fprintf(fd, "  double %s", CodeGeneration[C](CodeLine[2], resultname = CodeLine[1], output = string,
				coercetypes = false, deducetypes = false)):
		else
			fprintf(fd, "  %s", CodeGeneration[C]([CodeList[i]], output = string,
				coercetypes = false, deducetypes = false)):
		end:
	end do:
	fprintf(fd, "}\n"):
	fclose(fd):
	REGISTERING := false:
end:


COMRecursion := proc(j)
local FrameChange, R, P, m, mG, k, Result;

	FrameChange := FrameMatrix(j):
	R := submatrix(FrameChange, 1..3, 1..3):
	P := subvector(FrameChange, 1..3, 4):
	m := m_||(j):
	mG := evalm(m*G_||(j)):
	for k from 1 to NSOL
	do
		if ref_||(k) = j
		then
			Result := COMRecursion(k):
			m := evalm(m+Result[1]):
			mG := evalm(mG+Result[2]):
		fi:
	od:
	RETURN([m, evalm(R&*mG+m*P)]):
end:

COMPosition := proc()
local Result;

	print(`COM Position`);
	Result := COMRecursion(1):
	RETURN(evalm(Result[2]/Result[1])):
end:

TagPosition := proc(k) option remember;
local j, matrice, trans, rot;

	j := reftag_||(k):
	matrice := FrameMatrix(j):
	while ref_||(j) > 0 do
		j := ref_||(j):
		matrice := evalm(FrameMatrix(j)&*matrice):
	end:
	trans := subvector(matrice, 1..3, 4):
	rot := submatrix(matrice, 1..3, 1..3):
	RETURN(evalm(trans + rot &* tag_||(k))):
end:

TagMatrix := proc() option remember;

	print(`Tag Matrix`);
	RETURN(matrix([seq(TagPosition(i), i=1..NTAG), COMPosition()])):
end:

ContactVector := proc() option remember;
local contact;

	print(`Contact Vector`);
	contact := matrix([seq(TagPosition(i), i=points_contact)]):
        RETURN(matrix([seq(TagPosition(i), i=points_contact)])):
        #RETURN(stackmatrix(seq(matrix(vectdim(points_contact), 1, col(contact, i)), i=1..3))):
end:

ContactDistance := proc() option remember;
local contact,distance;

      contact := ContactVector():
      #RETURN(vector([seq((AR*contact[k,1]+BR*contact[k,2]+CR*contact[k,3]+DR)/sqrt(AR*AR+BR*BR+CR*CR),k=1..NCONT)])):
      RETURN(vector([seq(norm([contact[k,1],contact[k,2]+AngleT[1],contact[k,3]],2)-AngleT[1],k=1..NCONT)])):

      
end:


ContactJacobianMatrix := proc(k) option remember; # 3,4,8,9,13,14....17,18,19,20,21,22
local contact,contactjacobian,localtrans,T,RM,RM1,RM2,RM3,RootCoord,RMx,RMy,RMz,Kval,Zval,Klist,KNval;
        localtrans := matrix([[0, 1, 0], [1, 0, 0], [0, 0, 1]]):
        Klist := [3,4,8,9,13,14]:
	contact := ContactVector():
        T := TagMatrix():
        Kval:= Klist[k]:KNval:=points_contact[k]:
        Zval:= 16+k :
        RootCoord :=convert(submatrix(T,Kval..Kval,1..3),vector):
        RM1 := convert(submatrix(T,Zval..Zval,1..3),vector):
        RM2 := vector([contact[k,1],contact[k,2]+AngleT[1],contact[k,3]]):
        RMz := (RM1-RootCoord)/norm(RM1-RootCoord,2) :
        RMy :=RM2/norm(RM2,2): 
	RMx := crossprod(RMy,RMz):
        RMz := crossprod(RMx,RMy):
        RM:= concat(RMx/norm(RMx,2),RMy/norm(RMy,2),RMz/norm(RMz,2)):
	print(`Contact Jacobian`);
        contactjacobian:= matrix(evalm(localtrans &*  transpose(RM) &* jacobian(row(contact, k), q))):
	RETURN(contactjacobian):
end:

ContactHessianVector := proc() option remember;
local contact;

	contact := ContactVector():
	print(`Contact Hessian`);
	RETURN(map(x->subs({seq(q[i](t)=q[i],i=1..NDDL)},
		subs({seq(diff(q[i](t),t)=qdot[i],i=1..NDDL)},
		diff(subs({seq(diff(q[i](t),t)=qdot[i],i=1..NDDL)},
		diff(subs({seq(q[i]=q[i](t),i=1..NDDL)},x),t)),t))), contact)):
end:

GenerateModel := proc()
local i,fd, T, Tags, M, Inertia, N, NLEffects, CC, Contact, CH, ContactHessian,
	CJ, ContactJacobian, NJ, JacobianQNLEffects, NVJ, JacobianVNLEffects,CD,Distance,Name,NameJoin,RRV,PRV;
global q, qdot,AngleT;

	T := TagMatrix():
	print(`Writing file "Tags.c"`):
	T := convert(transpose(T), vector):
	Tags := makeproc(T, [T, q::array(1..vectdim(q))]):
	fd := fopen("Tags.c",WRITE);
	fprintf(fd,"#include \"LagrangianModel.h\"\n"):
	fclose(fd):
	C(Tags, optimized, filename="Tags.c"):

	GenerateInertiaMatrix():

	GenerateNLEffectsVector():
        
        NJ := JacobianNLEffectsMatrix():
	print(`Writing file "JacobianNLEffects.c"`):
	NJ := convert(transpose(NJ), vector):
	JacobianQNLEffects := makeproc(NJ, [NJ, q::array(1..vectdim(q)), qdot::array(1..vectdim(qdot))]):
	C(JacobianQNLEffects, optimized, filename="JacobianQNLEffects.c"):
	
	NVJ := JacobianVelocityNLEffectsMatrix():
	print(`Writing file "JacobianVNLEffects.c"`):
	NVJ := convert(transpose(NVJ), vector):
	JacobianVNLEffects := makeproc(NVJ, [NVJ, q::array(1..vectdim(q)), qdot::array(1..vectdim(qdot))]):
	C(JacobianVNLEffects, optimized, filename="JacobianVNLEffects.c"):


	CC := ContactVector():
	print(`Writing file "Contact.c"`):
	CC := convert(transpose(CC), vector):
	Contact := makeproc(CC, [CC, q::array(1..vectdim(q))]):
	fd := fopen("Contact.c",WRITE);
	fprintf(fd,"#include \"LagrangianModel.h\"\n"):
	fclose(fd):
	C(Contact, optimized, filename="Contact.c"):

	CH := ContactHessianVector():
	print(`Writing file "ContactHessian.c"`):
	CH := convert(transpose(CH), vector):
	ContactHessian := makeproc(CH, [CH, q::array(1..vectdim(q)), qdot::array(1..vectdim(qdot))]):
	fd := fopen("ContactHessian.c",WRITE);
	fprintf(fd,"#include \"LagrangianModel.h\"\n"):
	fclose(fd):
	C(ContactHessian, optimized, filename="ContactHessian.c"):

#------------------ContactJacobian Function Writing-------------------
    Name := Split("1:2:3:4:5:6",":"):
    for i from 1 to NCONT do

        CJ := ContactJacobianMatrix(i):
        NameJoin := CaseJoin(["ContactJacobian",Name[i],".c"]):
	print(`Writing file "ContactJacobian.c"`,i):
	CJ := convert(transpose(CJ), vector):
	ContactJacobian||i := makeproc(CJ, [CJ, AngleT::array(1..vectdim(AngleT)),q::array(1..vectdim(q))]):
	fd := fopen(NameJoin,WRITE);
        #fd := fopen("ContactJacobian.c",WRITE);
	fprintf(fd,"#include \"LagrangianModel.h\"\n"):
	fclose(fd):
	#C(ContactJacobian, optimized, filename="ContactJacobian.c"):
        C(ContactJacobian||i, optimized, filename=NameJoin):
    end do:
#----------------------------------------------------------------------
#----------------DISTANCE FUNCTION WRITING-------------------       
        CD := ContactDistance():
	print(`Writing file "Distance.c"`):
	#CD := convert(transpose(CD), vector):
        #vector(1, [CD]):
	Distance := makeproc(CD, [CD, AngleT::array(1..vectdim(AngleT)),q::array(1..vectdim(q))]):
	fd := fopen("Distance.c",WRITE);
	fprintf(fd,"#include \"LagrangianModel.h\"\n"):
	fclose(fd):
	C(Distance, optimized, filename="Distance.c"):
#------------------------------------------------------------

#--------------RootRotationVector Writting (VRML)------------
	print(`Writing file "RRV.c"`):
	RRV := makeproc(RootRotation, [RootRotation, AngleT::array(1..vectdim(AngleT)),q::array(1..vectdim(q))]):
	fd := fopen("RRV.c",WRITE);
	fprintf(fd,"#include \"LagrangianModel.h\"\n"):
	fclose(fd):
	C(RRV, optimized, filename="RRV.c"):


#--------------PlaneRotationVector Writting (VRML)------------
	print(`Writing file "PRV.c"`):
	PRV := makeproc(PlaneRotation, [PlaneRotation, AngleT::array(1..vectdim(AngleT)),q::array(1..vectdim(q))]):
	fd := fopen("PRV.c",WRITE);
	fprintf(fd,"#include \"LagrangianModel.h\"\n"):
	fclose(fd):
	C(PRV, optimized, filename="PRV.c"):

#---------------


end:
