/* Siconos-sample version 3.0.0, Copyright INRIA 2005-2008.
 * Siconos is a program dedicated to modeling, simulation and control
 * of non smooth dynamical systems.
 * Siconos is a free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * Siconos is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Siconos; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * Contact: Vincent ACARY vincent.acary@inrialpes.fr
 */

// Rover3D with Fixed Sphere
// Multi Shpere
// Author: Jianhui YANG
// Team: Bipop


#include "Robot.h"
#include "SiconosKernel.hpp"
#include <stdlib.h>
#include "Rover3DWheelFixedTriangleR.hpp"
using namespace std;

#include <boost/progress.hpp>


static int iteration_failed = 0;

int main(int argc, char* argv[])
{
  try
  {

    // ================= Creation of the model =======================

    // User-defined main parameters
    unsigned int nDof = 21;        // degrees of freedom for robot arm
    double t0 = 0;                 // initial computation time
    double T = 40;                 // final computation time
    double h = 0.005;               // time step
    double eps_n=0.1;
    double eps_t=0.0;
    double mu=0.8;
    double R=30;                 //Wheel Radius
    double l=20;
    double g=9.8;
    int Ns = 20;                 //gravity
    double WheelT = 10;         //Wheel Thickness
    double RAngle[3]= {0.0,0.0,0.0}; //Format of RAngle: Euler angles (alpha,beta,gamma)
    // -> mind to set the initial conditions below.

    // -------------------------
    // --- Dynamical systems ---
    // -------------------------
    DynamicalSystemsSet allDS;
    // --- DS: RoverDS ---

    // Initial position (angles in radian)
    SP::SiconosVector q0(new SiconosVector(nDof));
    SP::SiconosVector v0(new SiconosVector(nDof));
    q0->zero();
    v0->zero();

    //(*q0)(0) = 102;
    //(*q0)(2) = 260;//150;
    //(*q0)(1) = 160.5;
    //(*q0)(7) = -0.00;
    //(*q0)(8) = -0.00;
    //(*q0)(6) = 0.0;

    /*(*q0)(0) = -200.0;
    (*q0)(2) = -200.0;
    (*q0)(1) = 200.0;
    (*q0)(7) = 0.00;
    (*q0)(8) = 0.00;
    (*q0)(6) = 0.0;*/

    //q0 -> positions

    (*q0)(0) = 350;  //100 
    (*q0)(2) = 350;  //350
    (*q0)(1) = 200;
    (*q0)(7) = 0.3;
    (*q0)(8) = 0.2;
    (*q0)(6) = 0.0;


    SP::LagrangianDS arm(new LagrangianDS(q0, v0));
    // external plug-in
    arm->setComputeMassFunction("RobotPlugin.so","mass");

    //forces can't be too high - 10 is enough. otherwise the robot gets stuck in the soil.

    // -- Set external forces (traction) --
    SP::SiconosVector Force(new SiconosVector(nDof));
    (*Force)(9) = 400;       //FL traction
    (*Force)(10) = 400;      //FR  traction
    (*Force)(14) = 400;      //ML traction
    (*Force)(15) = 400;      //BL traction
    (*Force)(19) = 400;      //MR traction
    (*Force)(20) = 400;      //BR traction

    arm->setFExtPtr(Force);

    arm->setComputeNNLFunction("RobotPlugin.so","NNL");
    arm->setComputeJacobianNNLqFunction("RobotPlugin.so","jacobianNNLq");
    arm->setComputeJacobianNNLqDotFunction("RobotPlugin.so","jacobianVNNL");
    arm->setComputeFIntFunction("RobotPlugin.so","U");
    arm->setComputeJacobianFIntqFunction("RobotPlugin.so","jacobFintQ");
    arm->setComputeJacobianFIntqDotFunction("RobotPlugin.so","jacobFintV");
    allDS.insert(arm);

    // -------------------
    // --- Interactions---
    // -------------------

    InteractionsSet allInteractions;

    SP::NonSmoothLaw nslaw(new NewtonImpactFrictionNSL(eps_n, eps_t, mu,3));

//---------------------------------------------------
//---------------Interaction-------------------------
//---------------------------------------------------

//number of triangles 

    //int NumTr = 18;

    //int NumTr = 8;

    int NumTr = 2;

    vector<SP::Relation> relation(6*NumTr);
    vector<SP::Interaction> inter(6*NumTr);
      
    /*for(int j = 0; j < 6; j++)
    {

      relation[j*8 + 0].reset(new Rover3DWheelFixedTriangleR(0, -1, 0, 0, 0, 400, 400, -2, 400, j, R));
      relation[j*8 + 1].reset(new Rover3DWheelFixedTriangleR(0, -1, 0, 400, 0, 0, 400, -2, 400, j, R));
      relation[j*8 + 2].reset(new Rover3DWheelFixedTriangleR(0, 0, 400, 0, 0, 800, 400, 0, 800, j, R));
      relation[j*8 + 3].reset(new Rover3DWheelFixedTriangleR(0, 0, 400, 400, -2, 400, 400, 0, 800, j, R));
      relation[j*8 + 4].reset(new Rover3DWheelFixedTriangleR(400, 0, 0, 400, -2, 400, 800, 0, 400, j, R));
      relation[j*8 + 5].reset(new Rover3DWheelFixedTriangleR(400, 0, 0, 800, 0, 0, 800, 0, 400, j, R));
      relation[j*8 + 6].reset(new Rover3DWheelFixedTriangleR(400, -2, 400, 400, 0, 800, 800, 0, 800, j, R));
      relation[j*8 + 7].reset(new Rover3DWheelFixedTriangleR(400, -2, 400, 800, 0, 400, 800, 0, 800, j, R));
      
      inter[j*8 + 0].reset(new Interaction(allDS, j*8 + 0, 3, nslaw, relation[j*8 + 0]));
      inter[j*8 + 1].reset(new Interaction(allDS, j*8 + 1, 3, nslaw, relation[j*8 + 1]));
      inter[j*8 + 2].reset(new Interaction(allDS, j*8 + 2, 3, nslaw, relation[j*8 + 2]));
      inter[j*8 + 3].reset(new Interaction(allDS, j*8 + 3, 3, nslaw, relation[j*8 + 3]));
      inter[j*8 + 4].reset(new Interaction(allDS, j*8 + 4, 3, nslaw, relation[j*8 + 4]));
      inter[j*8 + 5].reset(new Interaction(allDS, j*8 + 5, 3, nslaw, relation[j*8 + 5]));
      inter[j*8 + 6].reset(new Interaction(allDS, j*8 + 6, 3, nslaw, relation[j*8 + 6]));
      inter[j*8 + 7].reset(new Interaction(allDS, j*8 + 7, 3, nslaw, relation[j*8 + 7]));
            
      allInteractions.insert(inter[j*8 + 0]);
      allInteractions.insert(inter[j*8 + 1]);
      allInteractions.insert(inter[j*8 + 2]);
      allInteractions.insert(inter[j*8 + 3]);
      allInteractions.insert(inter[j*8 + 4]);
      allInteractions.insert(inter[j*8 + 5]);
      allInteractions.insert(inter[j*8 + 6]);
      allInteractions.insert(inter[j*8 + 7]);
                  
      }*/

    /*for(int j = 0; j < 6; j++)
    {

      relation[j*8 + 0].reset(new Rover3DWheelFixedTriangleR(0, 3, 0, 0, 0, 100, 100, 20, 100, j, R));
      relation[j*8 + 1].reset(new Rover3DWheelFixedTriangleR(0, 3, 0, 100, 0, 0, 100, 20, 100, j, R));
      relation[j*8 + 2].reset(new Rover3DWheelFixedTriangleR(0, 0, 100, 0, 0, 200, 100, 0, 200, j, R));
      relation[j*8 + 3].reset(new Rover3DWheelFixedTriangleR(0, 0, 100, 100, 20, 100, 100, 0, 200, j, R));
      relation[j*8 + 4].reset(new Rover3DWheelFixedTriangleR(100, 0, 0, 100, 20, 100, 200, 0, 100, j, R));
      relation[j*8 + 5].reset(new Rover3DWheelFixedTriangleR(100, 0, 0, 200, 0, 0, 200, 0, 100, j, R));
      relation[j*8 + 6].reset(new Rover3DWheelFixedTriangleR(100, 20, 100, 100, 0, 200, 200, 0, 200, j, R));
      relation[j*8 + 7].reset(new Rover3DWheelFixedTriangleR(100, 20, 100, 200, 0, 100, 200, 0, 200, j, R));
      
      inter[j*8 + 0].reset(new Interaction(allDS, j*8 + 0, 3, nslaw, relation[j*8 + 0]));
      inter[j*8 + 1].reset(new Interaction(allDS, j*8 + 1, 3, nslaw, relation[j*8 + 1]));
      inter[j*8 + 2].reset(new Interaction(allDS, j*8 + 2, 3, nslaw, relation[j*8 + 2]));
      inter[j*8 + 3].reset(new Interaction(allDS, j*8 + 3, 3, nslaw, relation[j*8 + 3]));
      inter[j*8 + 4].reset(new Interaction(allDS, j*8 + 4, 3, nslaw, relation[j*8 + 4]));
      inter[j*8 + 5].reset(new Interaction(allDS, j*8 + 5, 3, nslaw, relation[j*8 + 5]));
      inter[j*8 + 6].reset(new Interaction(allDS, j*8 + 6, 3, nslaw, relation[j*8 + 6]));
      inter[j*8 + 7].reset(new Interaction(allDS, j*8 + 7, 3, nslaw, relation[j*8 + 7]));
            
      allInteractions.insert(inter[j*8 + 0]);
      allInteractions.insert(inter[j*8 + 1]);
      allInteractions.insert(inter[j*8 + 2]);
      allInteractions.insert(inter[j*8 + 3]);
      allInteractions.insert(inter[j*8 + 4]);
      allInteractions.insert(inter[j*8 + 5]);
      allInteractions.insert(inter[j*8 + 6]);
      allInteractions.insert(inter[j*8 + 7]);
                  
    }*/


    for(int j = 0; j < 6; j++)
    {

      relation[j*2].reset(new Rover3DWheelFixedTriangleR(0, 100, 0, 0, 0, 800, 800, 0, 0, j, R));
      relation[j*2 + 1].reset(new Rover3DWheelFixedTriangleR(0, 0, 800, 800, 0, 0, 800, 100, 800, j, R));

      
      
      inter[j*2].reset(new Interaction(allDS, j*2, 3, nslaw, relation[j*2]));
      inter[j*2 + 1].reset(new Interaction(allDS, j*2 + 1, 3, nslaw, relation[j*2 + 1]));

      
            
      allInteractions.insert(inter[j*2]);
      allInteractions.insert(inter[j*2 + 1]);

      
                  
    }


//    for(int i=0; i<NumSphere; i++)
//   {
//      for(int j=0; j<6; j++)
//      {
//        relation[i*6+j].reset(new Rover3DWheelFixedSphereR(j,Sphere[i][3],Sphere[i][0],Sphere[i][1],Sphere[i][2],R,WheelT));
//        inter[i*6+j].reset(new Interaction(allDS,i*6+j,3, nslaw, relation[i*6+j]));
//        allInteractions.insert(inter[i*6+j]);
//      }
//    }




    // -------------
    // --- Model ---
    // -------------

    SP::Model Rover3D(new Model(t0,T,allDS, allInteractions));


    // ----------------
    // --- Simulation ---
    // ----------------

    // -- Time discretisation --
    SP::TimeDiscretisation t(new TimeDiscretisation(t0,h));

    SP::TimeStepping s(new TimeStepping(t));
    //        s->setUseRelativeConvergenceCriteron(true);

    // -- OneStepIntegrators --

    //double theta=0.500001;
    double theta=0.50000001;

    SP::Moreau OSI(new Moreau(allDS,theta));
    s->insertIntegrator(OSI);


    //*******************************************************
    // -- OneStepNsProblem --
    //osnspb.reset(new FrictionContact(3));
    SP::OneStepNSProblem osnspb(new FrictionContact(3));

    osnspb->numericsSolverOptions()->iparam[0]=10000; // Max number of
    // iterations
    // osnspb->numericsSolverOptions()->iparam[1]=10000;  // compute error
    //                                                  // iterations

    osnspb->numericsSolverOptions()->iparam[4]=1;   // projection
    // Solver/formulation  0: projection, 1: Newton/AlartCurnier, 2: Newton/Fischer-Burmeister
    osnspb->numericsSolverOptions()->dparam[0]=1e-5;// Tolerance
    osnspb->numericsSolverOptions()->dparam[2]=1e-5;// Local tolerance
    osnspb->setNumericsVerboseMode(true);

    //*********************************************************************************

    s->insertNonSmoothProblem(osnspb);
    //s->setCheckSolverFunction(localCheckSolverOuput);
    cout << "=== End of model loading === " << endl;


    // ================================= Computation =================================

    // --- Simulation initialization ---
    cout << "=== Simulation initialization ===" << endl;
    Rover3D->initialize(s);

    cout <<"End of initialisation" << endl;
    int i=0;
    int k=0;
    int kk= 0;
    int N = (int)((T-t0)/h)+1;
    int NN=3*N+3;
    cout << "Number of time step   " << N << endl;
    // --- Get the values to be plotted ---
    // -> saved in a matrix dataPlot
    SimpleMatrix dataPlot(N+1,nDof+17+6);

    double qq[21];
    double Test[69];

    SimpleMatrix testdatabase(N+1,18);

    SP::SiconosVector q = arm->q();
    SP::SiconosVector v = arm->velocity();
    SP::SiconosVector yfunc = inter[0]->y(0);
    SP::SiconosVector yfunc1 = inter[1]->y(0);
    SP::SiconosVector yfunc2 = inter[2]->y(0);
    SP::SiconosVector yfunc3 = inter[3]->y(0);
    SP::SiconosVector yfunc4 = inter[4]->y(0);
    SP::SiconosVector yfunc5 = inter[5]->y(0);
    SP::SiconosVector lambda = inter[1]->lambda(1);
    SP::SiconosVector y2func = inter[6]->y(0);
    SP::SiconosVector y2func1 = inter[7]->y(0);
    SP::SiconosVector y2func2 = inter[8]->y(0);
    SP::SiconosVector y2func3 = inter[9]->y(0);
    SP::SiconosVector y2func4 = inter[10]->y(0);
    SP::SiconosVector y2func5 = inter[11]->y(0);

    dataPlot(k,0)= t0;
    dataPlot(k,1)=(*q)(0)/100;
    dataPlot(k,2)=(*q)(1)/100;
    dataPlot(k,3)=(*q)(2)/100;

    //dataPlot(k,1)=(*q)(0);
    //dataPlot(k,2)=(*q)(1);
    //dataPlot(k,3)=(*q)(2);

    dataPlot(k,4)=(*q)(3);
    dataPlot(k,5)=(*q)(4);
    dataPlot(k,6)=(*q)(5);
    dataPlot(k,7)=(*q)(6);
    dataPlot(k,8)=(*q)(7);
    dataPlot(k,9)=(*q)(8);
    dataPlot(k,10)= (*q)(9);
    dataPlot(k,11)=(*q)(10);
    dataPlot(k,12)=(*q)(11);
    dataPlot(k,13)=(*q)(12);
    dataPlot(k,14)=(*q)(13);
    dataPlot(k,15)=(*q)(14);
    dataPlot(k,16)=(*q)(15);
    dataPlot(k,17)=(*q)(16);
    dataPlot(k,18)=(*q)(17);
    dataPlot(k,19)=(*q)(18);
    dataPlot(k,20)=(*q)(19);
    dataPlot(k,21)=(*q)(20);
    dataPlot(k,22)=(*v)(0);
    dataPlot(k,23)=(*v)(1);
    dataPlot(k,24)=(*v)(2);
    dataPlot(k,25)=(*yfunc)(0);
    dataPlot(k,26)=(*yfunc1)(0);
    dataPlot(k,27)=(*yfunc2)(0);
    dataPlot(k,28)=(*yfunc3)(0);
    dataPlot(k,29)=(*yfunc4)(0);
    dataPlot(k,30)=(*yfunc5)(0);
    dataPlot(k,31)=(*lambda)(0);
    dataPlot(k,32)=(*v)(9);
    dataPlot(k,33)=(*v)(10);
    dataPlot(k,34)=(*v)(14);
    dataPlot(k,35)=(*v)(15);
    dataPlot(k,36)=(*v)(19);
    dataPlot(k,37)=(*v)(20);
    dataPlot(k,38)=(*y2func)(0);
    dataPlot(k,39)=(*y2func1)(0);
    dataPlot(k,40)=(*y2func2)(0);
    dataPlot(k,41)=(*y2func3)(0);
    dataPlot(k,42)=(*y2func4)(0);
    dataPlot(k,43)=(*y2func5)(0);

    //----------------------gnuplot data----------------************************
    i=0;
    while(i < nDof)
    {
      qq[i]=(*q)(i);
      i++;
    }
    Tags(Test ,qq);
    testdatabase(k,0)= Test[4];
    testdatabase(k,1)= Test[27];
    testdatabase(k,2)= Test[50];  //FL
    testdatabase(k,3)= Test[5];
    testdatabase(k,4)= Test[28];
    testdatabase(k,5)= Test[51];  //FR
    testdatabase(k,6)= Test[9];
    testdatabase(k,7)= Test[32];
    testdatabase(k,8)= Test[55];  //ML
    testdatabase(k,9)= Test[10];
    testdatabase(k,10)= Test[33];
    testdatabase(k,11)= Test[56];  //BL
    testdatabase(k,12)= Test[14];
    testdatabase(k,13)= Test[37];
    testdatabase(k,14)= Test[60];  //BR
    testdatabase(k,15)= Test[15];
    testdatabase(k,16)= Test[38];
    testdatabase(k,17)= Test[61];
//--------------------------------------------------


//-------------------------------------------************************

    boost::timer time;
    time.restart();
    // --- Time loop ---
    cout << "Start computation ... " << endl;

    boost::progress_display show_progress(N);

    while(k < N)
    {
      osnspb->setNumericsVerboseMode(0);
      //cout << "k value ..ak1. " << k << endl;
      k++;
      iteration_failed=k;
      ++show_progress;
      //	if (!(div(k,1000).rem))  cout <<"Step number "<< k << "\n";

      // Solve problem
      s->computeOneStep();


      //s->newtonSolve(criterion,maxIter);
      // Data Output
      //cout << "k value ..ak2. " << k << endl;

      dataPlot(k, 0) =  s->nextTime();


      dataPlot(k,1)=(*q)(0)/100;
      dataPlot(k,2)=(*q)(1)/100;
      dataPlot(k,3)=(*q)(2)/100;

      //dataPlot(k,1)=(*q)(0);
      //dataPlot(k,2)=(*q)(1);
      //dataPlot(k,3)=(*q)(2);

          
      dataPlot(k,4)=(*q)(3);
      dataPlot(k,5)=(*q)(4);
      dataPlot(k,6)=(*q)(5);
      dataPlot(k,7)=(*q)(6);
      dataPlot(k,8)=(*q)(7);
      dataPlot(k,9)=(*q)(8);
      dataPlot(k,10)=(*q)(9);
      dataPlot(k,11)=(*q)(10);
      dataPlot(k,12)=(*q)(11);
      dataPlot(k,13)=(*q)(12);
      dataPlot(k,14)=(*q)(13);
      dataPlot(k,15)=(*q)(14);
      dataPlot(k,16)=(*q)(15);
      dataPlot(k,17)=(*q)(16);
      dataPlot(k,18)=(*q)(17);
      dataPlot(k,19)=(*q)(18);
      dataPlot(k,20)=(*q)(19);
      dataPlot(k,21)=(*q)(20);
      dataPlot(k,22)=(*v)(0);
      dataPlot(k,23)=(*v)(1);
      dataPlot(k,24)=(*v)(2);
      dataPlot(k,25)=(*yfunc)(0);
      dataPlot(k,26)=(*yfunc1)(0);
      dataPlot(k,27)=(*yfunc2)(0);
      dataPlot(k,28)=(*yfunc3)(0);
      dataPlot(k,29)=(*yfunc4)(0);
      dataPlot(k,30)=(*yfunc5)(0);
      dataPlot(k,31)=(*lambda)(0);
      dataPlot(k,32)=(*v)(9);
      dataPlot(k,33)=(*v)(10);
      dataPlot(k,34)=(*v)(14);
      dataPlot(k,35)=(*v)(15);
      dataPlot(k,36)=(*v)(19);
      dataPlot(k,37)=(*v)(20);
      dataPlot(k,38)=(*y2func)(0);
      dataPlot(k,39)=(*y2func1)(0);
      dataPlot(k,40)=(*y2func2)(0);
      dataPlot(k,41)=(*y2func3)(0);
      dataPlot(k,42)=(*y2func4)(0);
      dataPlot(k,43)=(*y2func5)(0);
      //-------------------gnuplot ------------------*********************
      i=0;
      while(i < nDof)
      {
        qq[i]=(*q)(i);
        i++;
      }
      Tags(Test,qq);
      testdatabase(k,0)= Test[4];
      testdatabase(k,1)= Test[27];
      testdatabase(k,2)= Test[50];  //FL
      testdatabase(k,3)= Test[5];
      testdatabase(k,4)= Test[28];
      testdatabase(k,5)= Test[51];  //FR
      testdatabase(k,6)= Test[9];
      testdatabase(k,7)= Test[32];
      testdatabase(k,8)= Test[55];  //ML
      testdatabase(k,9)= Test[10];
      testdatabase(k,10)= Test[33];
      testdatabase(k,11)= Test[56];  //BL
      testdatabase(k,12)= Test[14];
      testdatabase(k,13)= Test[37];
      testdatabase(k,14)= Test[60];  //BR
      testdatabase(k,15)= Test[15];
      testdatabase(k,16)= Test[38];
      testdatabase(k,17)= Test[61];

//--------------------------------------------------

      //----------------------------------------------------**********************

      s->nextStep();
    }

    cout<<"End of computation - Number of iterations done: "<<k<<endl;
    cout << "Computation Time " << time.elapsed()  << endl;

    // --- Output files ---
    cout<<"====> Output file writing ..."<<endl;
    const char *Names[17]=
    {
      "DEF Rover_RootRotInterp OrientationInterpolator{\n",
      "DEF Rover_body_jointRotInterp OrientationInterpolator{\n",
      "DEF Rover_l_pendulum_jointRotInterp OrientationInterpolator{\n",
      "DEF Rover_lf_wheelAxis_jointRotInterp OrientationInterpolator{\n",
      "DEF Rover_lf_wheel_jointRotInterp OrientationInterpolator{\n",
      "DEF Rover_lm_wheelAxis_jointRotInterp OrientationInterpolator{\n",
      "DEF Rover_lm_wheel_jointRotInterp OrientationInterpolator{\n",
      "DEF Rover_r_pendulum_jointRotInterp OrientationInterpolator{\n",
      "DEF Rover_rf_wheelAxis_jointRotInterp OrientationInterpolator{\n",
      "DEF Rover_rf_wheel_jointRotInterp OrientationInterpolator{\n",
      "DEF Rover_rm_wheelAxis_jointRotInterp OrientationInterpolator{\n",
      "DEF Rover_rm_wheel_jointRotInterp OrientationInterpolator{\n",
      "DEF Rover_b_pendulum_jointRotInterp OrientationInterpolator{\n",
      "DEF Rover_br_wheelAxis_jointRotInterp OrientationInterpolator{\n",
      "DEF Rover_br_wheel_jointRotInterp OrientationInterpolator{\n",
      "DEF Rover_bl_wheelAxis_jointRotInterp OrientationInterpolator{\n",
      "DEF Rover_bl_wheel_jointRotInterp OrientationInterpolator{\n"
    };


    const char *NamesRotationVector[17]=
    {
      "Rover_RootRotInterp OrientationInterpolator{\n",
      "Rover_body_jointRotInterp OrientationInterpolator{\n",
      "1 0 0",       //DEF Rover_l_pendulum_jointRotInterp
      "0 -1 0",       //DEF Rover_lf_wheelAxis_jointRotInterp
      "1 0 0",	//DEF Rover_lf_wheel_jointRotInterp
      "0 -1 0",	//DEF Rover_lm_wheelAxis_jointRotInterp
      "1 0 0",	//DEF Rover_lm_wheel_jointRotInterp
      "1 0 0",	//DEF Rover_r_pendulum_jointRotInterp
      "0 -1 0",	//DEF Rover_rf_wheelAxis_jointRotInterp
      "1 0 0",	//DEF Rover_rf_wheel_jointRotInterp
      "0 -1 0",	//DEF Rover_rm_wheelAxis_jointRotInterp
      "1 0 0",	//DEF Rover_rm_wheel_jointRotInterp
      "0 0 1",	//DEF Rover_b_pendulum_jointRotInterp
      "0 -1 0",	//DEF Rover_br_wheelAxis_jointRotInterp
      "1 0 0",	//DEF Rover_br_wheel_jointRotInterp
      "0 -1 0",	//DEF Rover_bl_wheelAxis_jointRotInterp
      "1 0 0"
    };	//DEF Rover_bl_wheel_jointRotInterp

    //all variables except trunk coords

    int NamesDOF[17];
    NamesDOF[0]=0;
    NamesDOF[1]=0;
    NamesDOF[2]=12;
    NamesDOF[3]=14;
    NamesDOF[4]=16;
    NamesDOF[5]=13;
    NamesDOF[6]=15;
    NamesDOF[7]=17;
    NamesDOF[8]=19;
    NamesDOF[9]=21;
    NamesDOF[10]=18;
    NamesDOF[11]=20;
    NamesDOF[12]=7;
    NamesDOF[13]=9;
    NamesDOF[14]=11;
    NamesDOF[15]=8;
    NamesDOF[16]=10;

  double RootRotationVector[4];
  double PlaneRotationVector[4];

  
    FILE * pFile;
    pFile = fopen ("data.wrl","w");

//---------------floor---------------------

/*   fprintf(pFile,"DEF FLOOR Transform {\n"); 
   fprintf(pFile,"translation ");
   fprintf(pFile,"%e %e %e\n", 0.0,-0.0, 0.0);
   fprintf(pFile,"rotation ");
   qq[0] = 0;
   PRV(PlaneRotationVector,RAngle,qq);
   if (PlaneRotationVector[3]==0)
     {fprintf(pFile,"%e %e %e %e\n",0.0,0.0,0.0,0.0);}
   else
     {fprintf(pFile,"%e %e %e %e\n",PlaneRotationVector[0],PlaneRotationVector[1],PlaneRotationVector[2],PlaneRotationVector[3]);}


   fprintf(pFile,"children [\n Shape {\n appearance Appearance {\n material Material { diffuseColor 0 1 1 }}\n");
   fprintf(pFile,"geometry Box { size 70 0.05 70 }");
   fprintf(pFile,"}\n]\n}\n");

   //fprintf(pFile,"DEF FLOORCompare Transform {\n"); 
   //fprintf(pFile,"translation ");
   //fprintf(pFile,"%e %e %e\n", 0.0, -10, 0.0);
   
   //fprintf(pFile,"children [\n Shape {\n appearance Appearance {\n material Material { diffuseColor 0 0 1 }}");
   //fprintf(pFile,"geometry Box { size 20 0.05 30 }");
   //fprintf(pFile,"}\n]\n}\n");

*/

//----------------Animation------------------
    fprintf(pFile,"DEF Animation Group {\n  children [\n");
    fprintf(pFile,"\n");

    fprintf(pFile,"DEF Rover_rootPosInterp PositionInterpolator{\n");
    fprintf(pFile,"    key [ 0 ");
    for (int cmp =1;cmp <= N;cmp++){
        fprintf(pFile,",%e",(dataPlot(cmp,0)-t0)/(T-t0));}
	
    fprintf(pFile,"]\n"); 
    fprintf(pFile,"    keyValue [  ");
    fprintf(pFile,"%e %e %e,\n",dataPlot(0,1),dataPlot(0,2),dataPlot(0,3));
    for (int cmp =1;cmp <= N;cmp++){
      //SEEEEEEEEEEEEEEEEEEEEE it!!!!!!!!!!!!!!!!!    
    fprintf(pFile,"%e %e %e,\n",dataPlot(cmp,3),dataPlot(cmp,2),dataPlot(cmp,1));}

    fprintf(pFile,"  ]\n}\n");

// ----------root oritation--------------
    fprintf(pFile,"DEF Rover_rootRotInterp OrientationInterpolator{\n");
    fprintf(pFile,"    key [ 0 ");
    for (int cmp =1;cmp <= N;cmp++){
        fprintf(pFile,",%e",(dataPlot(cmp,0)-t0)/(T-t0));}
	
    fprintf(pFile,"]\n"); 
    fprintf(pFile,"    keyValue [  ");

    i = 0;
    while(i < nDof)
  	{
          qq[i]=dataPlot(0,i+1);
          i++;
	  } 
    RRV(RootRotationVector,RAngle,qq);
    if (RootRotationVector[3]==0 )
      {fprintf(pFile,"%e %e %e %e,\n",0.0,0.0,0.0,0.0);}
    else
      {fprintf(pFile,"%e %e %e %e,\n",RootRotationVector[2], RootRotationVector[1], RootRotationVector[0],RootRotationVector[3]);}
   
    for (int cmp =1;cmp <= N;cmp++){
         i = 0;
    while(i < nDof)
	{  
           qq[i]=dataPlot(cmp,i+1);
          i++;
	} 
    RRV(RootRotationVector,RAngle,qq);
    if (RootRotationVector[3]==0 )
      {fprintf(pFile,"%e %e %e %e,\n",0.0,0.0,0.0,0.0);}
    else
      {fprintf(pFile,"%e %e %e %e,\n",RootRotationVector[2], RootRotationVector[1], RootRotationVector[0],RootRotationVector[3]);}
    }
    

   fprintf(pFile,"  ]\n}\n");

//---------segment rotation----------------
    for (int CountN=2; CountN<=16; CountN++){
    
   fprintf(pFile,Names[CountN]);
    fprintf(pFile,"    key [ 0 ");
    for (int cmp =1;cmp <= N;cmp++){
        fprintf(pFile,",%e",(dataPlot(cmp,0)-t0)/(T-t0));}
	
    fprintf(pFile,"]\n"); 
    fprintf(pFile,"    keyValue [  ");
    fprintf(pFile,NamesRotationVector[CountN]);
    fprintf(pFile," %e,\n",dataPlot(0,NamesDOF[CountN]));

    for (int cmp =1;cmp <= N;cmp++){
    fprintf(pFile,NamesRotationVector[CountN]);
    fprintf(pFile," %e,\n",dataPlot(cmp,NamesDOF[CountN]));}

   fprintf(pFile,"  ]\n}\n");
                                 }
    //fprintf(pFile,"  ]\n}\n");
    fclose(pFile);
    //system("cat RoverModel.wrl data.wrl RoverAnimation.wrl > run.wrl");
    system("cat mars1.wrl data.wrl RoverAnimation.wrl > run.wrl");

    // --- Output files ---
    ioMatrix::write("DoublePendulumResult.dat", "ascii",
                    dataPlot,"noDim");
    ioMatrix::write("TAGSDATA.dat", "ascii",
                    testdatabase,"noDim");

  }

  catch(SiconosException e)
  {
    cout << e.report() << endl;
  }
  catch(...)
  {
    cout << "Exception caught in \'sample/MultiBeadsColumn\'" << endl;
  }
}

